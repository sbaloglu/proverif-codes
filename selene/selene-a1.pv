(*
Selene ProVerif model for verifiability with the adversary A1, i.e.

- Corrupted Voter (modeled with LeakCredential process).

In this model, we check:

- Individual Verifiability 1 (IV1),
- Individual Verifiability 2 (IV2) for no clash property on Verified(id, cr, v),
- Individual Verifiability 3 (IV3) for eligibility of Verified(id, cr, v),
- Eligibility Verifiability (ELI) for BB_res(tr, v),
- Result 1 Property (RES1) for strong verifiability definition,
- Result 2 Property (RES2) for weak verifiability definition,
- Consistency Properties (REG1 & REG2) for Reg(id, cr),
- Consistency Properties (LINK1 & LINK2) for Link(cr, tr),
- Consistency Property (ONE) for BB_res(tr, v).

More specifically,

- Strong E2E verifiability for honest/corrupted voters:
    IV1, IV2, IV3, ELI, RES1, REG1, REG2, LINK1, LINK2, ONE
- Weak E2E verifiability for honest/corrupted voters:
    IV1, IV2, IV3, ELI, RES2, REG1, REG2, LINK1, LINK2, ONE

In the case of falsified IV1, IV2, or IV3, we also check:

- Weak Individual Verifiability 1 (WIV1),
- Weak Individual Verifiability 2 (WIV2),
- Weak Individual Verifiability 3 (WIV3),

for honest voters who verified their vote when corrupted voters existed
during the election. In that case, we will regard the result for WIV1, WIV2,
or WIV3 instead of IV1, IV2, or IV3 for honest voters.

Notes:

- In this model, we only tally the non-empty ballots so that we ignore the cases
  with empty votes in the definition.
- Reg(id, cr) is modeled in the process of Registrar since the registrar is honest.

Results:

- Success: IV1, IV2, IV3, ELI, RES1, RES2, REG1, REG2, LINK1, LINK2, ONE: true
- Execution Time: 3.382s
- Attacks: -
- Outcome: Strong/Weak E2E verifiability is satisfied for honest and corrupted voters.

*)

(*** DECLARATIONS ***)

free pub: channel.

const rand: bitstring. (* fixed randomness for trivial encryption *)
const empty: bitstring.
const ok: bitstring.

type skey.
type pkey.
type sskey.
type spkey.
type tskey.
type tpkey.

(* ELGamal encryption *)

fun pk(skey): pkey.
fun enc(bitstring, pkey, bitstring): bitstring.
fun proof_enc(bitstring, bitstring, bitstring): bitstring.
fun proof_renc(bitstring, bitstring, bitstring): bitstring.
fun proof_dec(bitstring, bitstring, skey): bitstring.

reduc forall m: bitstring, skT: skey, r: bitstring;
      dec(enc(m, pk(skT), r), skT) = m.
reduc forall m: bitstring, pkT: pkey, r1, r2:bitstring;
      renc(enc(m, pkT, r1), pkT, r2) = enc(m, pkT, r2).
reduc forall m: bitstring, pkT: pkey, r: bitstring;
      ver_enc(proof_enc(enc(m, pkT, r), m, r), enc(m, pkT, r), pkT) = ok.
reduc forall m: bitstring, pkT: pkey, r1, r2: bitstring;
      ver_renc(proof_renc(enc(m, pkT, r1), enc(m, pkT, r2), r2), enc(m, pkT, r1),
      enc(m, pkT, r2), pkT) = ok.
reduc forall m: bitstring, skT: skey, r: bitstring;
      ver_dec(proof_dec(enc(m, pk(skT), r), m, skT), enc(m, pk(skT), r), m, pk(skT)) = ok.
reduc forall m: bitstring, pkT: pkey, r: bitstring;
      extract(enc(m, pkT, r), pkT) = m.

(* Digital signature *)

fun spk(sskey): spkey.
fun sign(bitstring, sskey): bitstring.

reduc forall m: bitstring, skV: sskey; check(sign(m, skV), spk(skV)) = m.

(* Trapdoor commitment *)

fun tdpk(tskey): tpkey.
fun commit(bitstring, tpkey, bitstring): bitstring.
fun open(bitstring, tskey, bitstring): bitstring.
fun fake(bitstring, bitstring, tskey, bitstring): bitstring.
fun exp(tpkey, bitstring): bitstring.
fun proof_rand(bitstring, bitstring, bitstring, bitstring, bitstring): bitstring.
fun proof_com(tpkey, bitstring, bitstring, bitstring, bitstring, skey, bitstring): bitstring.

(* verification of the proof for using the same randomness in both
   encryption of the exponentiation and encryption of the commitment randomness *)
reduc forall tpk: tpkey, pkT: pkey, r, r1, r2: bitstring;
      ver_rand(proof_rand(enc(exp(tpk, r), pkT, r1), enc(r, pkT, r2), r, r1, r2),
      enc(exp(tpk, r), pkT, r1), enc(r, pkT, r2), pkT) = ok.

(* obtaining the commitment from the homomorphic encryption of the encryption
   of the exponentiation and the encryption of the tracker assigned to the voter *)
reduc forall tpk: tpkey, skT: skey, tr, r, r1, r2: bitstring;
      hdec(enc(exp(tpk, r), pk(skT), r1), enc(tr, pk(skT), r2), skT) = commit(tr, tpk, r).

(* verification of the proof for correctly computing the commitment
   from the pair of homomorphic encryption *)
reduc forall tpk: tpkey, tr: bitstring, skT: skey, r, r1, r2, r3: bitstring;
	    ver_com(proof_com(tpk, enc(exp(tpk, r), pk(skT), r1), enc(r, pk(skT), r2),
      enc(tr, pk(skT), r3), commit(tr, tpk, r), skT, r), tpk,
      enc(exp(tpk, r), pk(skT), r1), enc(r, pk(skT), r2),
      enc(tr, pk(skT), r3), commit(tr, tpk, r), pk(skT)) = ok.

(* equation allowing to open the commitment and to generate fake commitments *)
equation forall tr: bitstring, tsk: tskey, r: bitstring;
		     open(commit(tr, tdpk(tsk), r), tsk, r) = tr;
	       forall tr1, tr2: bitstring, tsk: tskey, r: bitstring;
	       commit(tr2, tdpk(tsk), fake(tr1, tr2, tsk, r)) = commit(tr1, tdpk(tsk), r);
	       forall tr1, tr2: bitstring, tsk: tskey, r: bitstring;
	       open(commit(tr1, tdpk(tsk), r), tsk, fake(tr1, tr2, tsk, r)) = tr2;
	       forall tr1, tr2, tr3: bitstring, tsk: tskey, r: bitstring;
	       fake(tr2, tr3, tsk, fake(tr1, tr2, tsk, r)) = fake(tr1, tr3, tsk, r) [convergent].

(* Hashing *)

fun h(bitstring, bitstring, spkey, bitstring): bitstring.

(* Equality *)

fun eq(bitstring, bitstring): bool

reduc forall x: bitstring; eq(x,x) = true
otherwise forall x: bitstring, y: bitstring; eq(x,y) = false.


(* Bulletin Board *)

table BBkey(pkey).
table BBcand(bitstring).
table BBreg(spkey).
table BBtd(spkey, tpkey).
table BBtr(bitstring, bitstring).
table BBretr(bitstring, bitstring).
table BBatr(spkey, tpkey, bitstring, bitstring).
table BBptr(spkey, tpkey, bitstring, bitstring, bitstring, pkey).
table BBcompair(spkey, tpkey, bitstring, bitstring, bitstring).
table BBcom(spkey, tpkey, bitstring, bitstring, bitstring).
table BBcast(spkey, tpkey, bitstring, bitstring, bitstring).
table BBtally(spkey, tpkey, bitstring, bitstring, bitstring).
table BBdec(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring).
table BBres(bitstring, bitstring).

(* Facts to be recorded *)

table Id(bitstring).
table Pwd(bitstring, bitstring).
table Cred(bitstring, spkey, sskey).
table Td(bitstring, tpkey, tskey).
table Com(spkey, bitstring).
table Voted(bitstring, spkey, bitstring).
table Linked(spkey).


(*** EVENTS ***)

event BB_key(pkey).
event BB_cand(bitstring, bitstring).
event BB_reg(spkey).
event BB_td(spkey, tpkey).
event BB_tr(bitstring, bitstring).
event BB_atr(spkey, tpkey, bitstring).
event BB_com(spkey, tpkey, bitstring, bitstring).
event BB_cast(spkey, tpkey, bitstring, bitstring, bitstring).
event BB_tally(spkey, tpkey, bitstring, bitstring, bitstring).
event BB_res(bitstring, bitstring).
event SelectVote(bitstring, bitstring).
event Credential(bitstring, spkey, sskey).
event Trapdoor(bitstring, tpkey, tskey).
event Reg(bitstring, spkey).
event Log(bitstring, spkey).
event Vote(bitstring, bitstring).
event Verified(bitstring, spkey, bitstring).
event Corrupted(bitstring).
event Mix(bitstring, bitstring).
event Link(spkey, bitstring).
event LinkFailed(spkey).


(* RESTRICTIONS *)

(* to ensure there is only one election key *)
restriction pkT1, pkT2: pkey;
            event(BB_key(pkT1)) && event(BB_key(pkT2)) ==> pkT1 = pkT2.

(* to ensure there are two candidates *)
restriction v1, v2, v3, v4: bitstring;
            event(BB_cand(v1, v2)) && event(BB_cand(v3, v4)) ==> v1 = v3 && v2 = v4.

(* to ensure each voter has one signature key pair *)
restriction id: bitstring, cr1, cr2: spkey, skV1, skV2: sskey;
            event(Credential(id, cr1, skV1)) && event(Credential(id, cr2, skV2))
            ==> cr1 = cr2 && skV1 = skV2.

(* to ensure each voter has one trapdoor key pair *)
restriction id: bitstring, tpk1, tpk2: tpkey, tsk1, tsk2: tskey;
            event(Trapdoor(id, tpk1, tsk1)) && event(Trapdoor(id, tpk2, tsk2))
            ==> tpk1 = tpk2 && tsk1 = tsk2.

(* to ensure each voter has recorded one trapdoor public key *)
restriction cr: spkey, tpk1, tpk2: tpkey;
            event(BB_td(cr, tpk1)) && event(BB_td(cr, tpk2))
            ==> tpk1 = tpk2.

(* to ensure there is one-to-one mapping between trackers and their encryptions *)
restriction etr1, etr2, retr: bitstring;
            event(Mix(etr1, retr)) && event(Mix(etr2, retr)) ==> etr1 = etr2.
restriction etr, retr1, retr2: bitstring;
            event(Mix(etr, retr1)) && event(Mix(etr, retr2)) ==> retr1 = retr2.

(* to ensure each retr is matched with only one credential *)
restriction cr1, cr2: spkey, tpk1, tpk2: tpkey, retr: bitstring;
            event(BB_atr(cr1, tpk1, retr)) && event(BB_atr(cr2, tpk2, retr))
            ==> cr1 = cr2 && tpk1 = tpk2.

(* to ensure each credential is matched with only one re-encrypted tracker *)
restriction cr: spkey, tpk: tpkey, retr1, retr2: bitstring;
            event(BB_atr(cr, tpk, retr1)) && event(BB_atr(cr, tpk, retr2))
            ==> retr1 = retr2.

(* to ensure only one commitment is generated for each credential *)
restriction cr: spkey, tpk: tpkey, retr, com1, com2: bitstring;
            event(BB_com(cr, tpk, retr, com1)) && event(BB_com(cr, tpk, retr, com2))
            ==> com1 = com2.

(* to ensure log consistency *)
restriction id: bitstring, cr1, cr2: spkey;
            event(Log(id, cr1)) && event(Log(id, cr2)) ==> cr1 = cr2.
restriction id1, id2: bitstring, cr: spkey;
            event(Log(id1, cr)) && event(Log(id2, cr)) ==> id1 = id2.

(* to ensure only one ballot is tallied for each credential *)
restriction cr: spkey, tpk: tpkey, retr, com, b, b1: bitstring;
            event(BB_tally(cr, tpk, retr, com, b))
            && event(BB_tally(cr, tpk, retr, com, b1)) ==> b = b1.

(* to ensure only one vote is published for each tracker *)
restriction tr, v, v1: bitstring;
            event(BB_res(tr, v)) && event(BB_res(tr, v1)) ==> v = v1.

(* to ensure each cast is eligible, i.e. credential is recorded before *)
restriction cr: spkey, tpk: tpkey, retr: bitstring, com: bitstring, b: bitstring;
            event(BB_cast(cr, tpk, retr, com, b)) ==> event(BB_reg(cr)).

(* to ensure each result is eligible, i.e. tracker is recorded before *)
restriction tr: bitstring, etr: bitstring, v: bitstring;
            event(BB_res(tr, v)) ==> event(BB_tr(tr, etr)).

(* at most one vote selected to be counted for each tracker *)
restriction tr, n1, n2: bitstring;
            event(SelectVote(tr, n1)) && event(SelectVote(tr, n2)) ==> n1 = n2.

(*** QUERIES ***)

(* Reachability queries *)
(*
query cr: spkey; event(BB_reg(cr)).
query tr, v: bitstring; event(BB_res(tr, v)).
query id: bitstring, cr: spkey; event(Reg(id, cr)).
query cr: spkey, tr: bitstring; event(Link(cr, tr)).
query id, v: bitstring; event(Vote(id, v)).
query id, v: bitstring, cr: spkey; event(Verified(id, cr, v)).
query id: bitstring; event(Corrupted(id)).
query cr: spkey; event(LinkFailed(cr)).
*)

(* Verifiability queries *)

(* Individual Verifiability 1 *)

query id, tr, v, v1: bitstring, cr: spkey;
      event(Verified(id, cr, v)) && event(Link(cr, tr)) && event(BB_res(tr, v1))
      ==> v = v1.

(* Weak Individual Verifiability 1 *)
(*
query id, tr, v, v1: bitstring, cr: spkey;
      event(Verified(id, cr, v)) && event(Link(cr, tr)) && event(BB_res(tr, v1))
      ==> v = v1 || event(Corrupted(id)).
*)

(* Individual Verifiability 2 *)

query id1, id2, v1, v2: bitstring, cr: spkey;
      event(Verified(id1, cr, v1)) && event(Verified(id2, cr, v2))
      ==> id1 = id2.

(* Weak Individual Verifiability 2 *)
(*
query id1, id2, v1, v2: bitstring, cr: spkey;
      event(Verified(id1, cr, v1)) && event(Verified(id2, cr, v2))
      ==> id1 = id2 || event(Corrupted(id1)) || event(Corrupted(id2)).
*)

(* Individual Verifiability 3 *)

query id, tr, v: bitstring, cr: spkey;
      event(Verified(id, cr, v)) ==> event(Link(cr, tr)) && event(BB_reg(cr)).

(* Weak Individual Verifiability 3 *)
(*
query id, tr, v: bitstring, cr: spkey;
      event(Verified(id, cr, v)) ==> ( event(Link(cr, tr)) && event(BB_reg(cr)) )
                                  || ( event(Corrupted(id)) ).
*)

(* Eligibility Verifiability *)

query id, tr, v: bitstring, cr: spkey;
      event(BB_res(tr, v))
      ==> event(Link(cr, tr)) && event(BB_reg(cr)) && event(Reg(id, cr)).

(* Result 1 Property *)

query id, tr, v: bitstring, cr: spkey;
      event(BB_res(tr, v)) && event(Link(cr, tr)) && event(Reg(id, cr))
      ==> event(Vote(id, v)) || event(Corrupted(id)).

(* Result 2 Property *)

query id, tr, v, v1: bitstring, cr: spkey;
      event(Verified(id, cr, v1)) && event(BB_res(tr, v)) && event(Link(cr, tr)) && event(Reg(id, cr))
      ==> event(Vote(id, v)) || event(Corrupted(id)).

(* Consistency properties *)

(* Reg 1 *)

query id1, id2: bitstring, cr: spkey;
      event(Reg(id1, cr)) && event(Reg(id2, cr)) ==> id1 = id2.

(* Reg 2 *)

query id: bitstring, cr1, cr2: spkey;
      event(Reg(id, cr1)) && event(Reg(id, cr2)) ==> cr1 = cr2.

(* Link 1 *)

query cr1, cr2: spkey, tr: bitstring;
      event(Link(cr1, tr)) && event(Link(cr2, tr)) ==> cr1 = cr2.

(* Link 2 *)

query cr: spkey, tr1, tr2: bitstring;
      event(Link(cr, tr1)) && event(Link(cr, tr2)) ==> tr1 = tr2.

(* One *)

query tr, v, v1: bitstring, i, j: time;
      event(BB_res(tr, v)) @i && event(BB_res(tr, v1)) @j ==> i = j.


(*** MACROS ***)

(***** Administrator *****)

let SetupCandidates =
  (* receive candidates from public channel *)
	in(pub, (v1: bitstring, v2: bitstring));
  (* if candidates are different then *)
  if v1 <> v2 then
  event BB_cand(v1, v2);
  (* publish first candidate on BBcand *)
	insert BBcand(v1);
  (* publish second candidate on BBcand *)
	insert BBcand(v2).

let SetupVoters =
  (* receive a voter identity from public channel *)
	in(pub, id: bitstring);
  (* record voter identity on Id *)
	insert Id(id).

let SetupTrackers(pkT: pkey) =
  (* generate a tracker *)
	new tr: bitstring;
  (* trivial encryption of the tracker *)
	let etr = enc(tr, pkT, rand) in
  event BB_tr(tr, etr);
  (* publish tracker & trivially encrypted tracker on BBtr *)
	insert BBtr(tr, etr);
  (* send them to the public channel for accessibility of adversary to BB *)
	out(pub, (tr, etr)).

let AssignTrackers(pkT: pkey) =
  (* get a tracker from BBtr *)
  get BBtr(tr, etr) in
  (* get re-encrypted tracker from BBretr *)
  get BBretr(retr, pr_renc) in
  (* verify proof of re-encryption *)
  if ver_renc(pr_renc, etr, retr, pkT) = ok then
  (* get an eligible credential from BBreg *)
  get BBreg(cr) in
  (* get credential's trapdoor from BBtd *)
  get BBtd(=cr, tpk) in
  event BB_atr(cr, tpk, retr);
  (* publish re-encrypted tracker next to associated credential on BBatr *)
  insert BBatr(cr, tpk, retr, pr_renc);
  (* send them to the public channel for accessibility of adversary to BB *)
  out(pub, (cr, tpk, retr)).

let Administrator =
	get BBkey(pkT) in
	( SetupCandidates | (!SetupVoters) | (!SetupTrackers(pkT)) | (!AssignTrackers(pkT)) ).


(***** Trustees *****)

let ReencryptTrackers(pkT: pkey) =
  (* get a tracker & its encryption from BBtr *)
  get BBtr(tr, etr) in
  (* generate a randomness for the re-encryption of tracker *)
  new r: bitstring;
  (* re-encrypt tracker and generate proof of re-encryption *)
  let retr = renc(etr, pkT, r) in
  let pr_renc = proof_renc(etr, retr, r) in
  event Mix(etr, retr);
  (* publish re-encrypted tracker on BBretr *)
  insert BBretr(retr, pr_renc);
  (* send them to the public channel for accessibility of adversary to BB *)
  out(pub, (retr, pr_renc)).

let CommitTrackers(pkT: pkey, skT: skey) =
  (* get a voter tuple from BBatr *)
	get BBatr(cr, tpk, retr, pr_renc) in
  (* generate a commitment randomness *)
	new rT: bitstring;
  (* record commitment randomness for cr on Com *)
	insert Com(cr, rT);
  (* generate two encryption randomness *)
  new r1: bitstring;
  new r2: bitstring;
  (* encrypt exponentiation of trapdoor public key to commitment randomness *)
  let first = enc(exp(tpk, rT), pkT, r1) in
  (* encrypt commitment randomness *)
  let second = enc(rT, pkT, r2) in
  (* generate proof for using the same randomness in both first and second *)
  let pr_rand = proof_rand(first, second, rT, r1, r2) in
  (* publish commitment pair for cr on BBcompair *)
  insert BBcompair(cr, tpk, first, second, pr_rand);
  (* obtain commitment from the homomorphic encryption of first & retr *)
  let com = hdec(first, retr, skT) in
  (* generate proof for correctly computing the commitment *)
	let pr_com = proof_com(tpk, first, second, retr, com, skT, rT) in
  event BB_com(cr, tpk, retr, com);
  (* publish com & pr_com next to cr, tpk & retr on BBcom *)
  insert BBcom(cr, tpk, retr, com, pr_com);
  (* publish pre-tracking information related to tracker on BBptr *)
  insert BBptr(cr, tpk, retr, com, pr_renc, pkT);
  (* send all recorded information on BBcompair and BBcom to public channel *)
	out(pub, (cr, tpk, retr, first, second, pr_rand, com, pr_com)).

let DecryptBallots(skT: skey) =
  (* get a tuple from BBtally for the decryption *)
	get BBtally(cr, tpk, retr, com, (c: bitstring, s: bitstring, pr_enc: bitstring)) in
  (* generate proofs for the decryption of retr & c *)
	let pr_dec1 = proof_dec(retr, dec(retr, skT), skT) in
	let pr_dec2 = proof_dec(c, dec(c, skT), skT) in
  (* publish tracker & vote together with their proof of decryptions on BBdec *)
	insert BBdec(retr, dec(retr, skT), pr_dec1, c, dec(c, skT), pr_dec2);
  (* send all recorded information on BBdec to the public channel *)
	out(pub, (retr, dec(retr, skT), pr_dec1, c, dec(c, skT), pr_dec2)).

let Trustees =
  (* generate secret key of election *)
	new skT: skey;
  (* compute corresponding public key *)
	let pkT = pk(skT) in
  event BB_key(pkT);
  (* publish public key on BBkey *)
	insert BBkey(pkT);
  (* send public key to the public channel for accessibility of adversary to BB *)
  out(pub, pkT);
	( (!ReencryptTrackers(pkT)) | (!CommitTrackers(pkT, skT)) | (!DecryptBallots(skT)) ).


(***** Registrar *****)

let Registrar =
  (* get a voter identity from Id *)
  get Id(id) in
  (* generate a signing key for the voter *)
 	new skV: sskey;
  (* compute corresponding public key *)
 	let cr = spk(skV) in
  event Credential(id, cr, skV);
  (* record id with signature key pair on Cred *)
  insert Cred(id, cr, skV);
  event Reg(id, cr);
  event BB_reg(cr);
  (* publish verification key, i.e. credential, on BBreg *)
 	insert BBreg(cr);
  (* send credential to the public channel for accessibility of adversary to BB *)
 	out(pub, cr).


(***** Server *****)

let GeneratePassword(id: bitstring) =
  (* generate a password for id *)
  new pwd: bitstring;
  (* record password for id on Pwd *)
  insert Pwd(id, pwd).

let CheckCommitmentProof(pkT: pkey) =
  (* get a voter tuple from BBatr *)
	get BBatr(cr, tpk, retr, pr_renc) in
  (* get commitment pair with its proof for cr from BBcompair *)
  get BBcompair(=cr, =tpk, first, second, pr_rand) in
  (* get commitment & its proof for cr from BBcom *)
	get BBcom(=cr, =tpk, =retr, com, pr_com) in
  (* verify proofs for the commitment pair & commitment *)
  if ver_rand(pr_rand, first, second, pkT) = ok then
	if ver_com(pr_com, tpk, first, second, retr, com, pkT) = ok then
  (* publish cr, tpk, retr, com & empty (to be used for a ballot) on BBcast *)
	insert BBcast(cr, tpk, retr, com, empty).

let CastBallot(pkT: pkey) =
  (* recall password of id from Pwd *)
  get Pwd(id, pwd) in
  (* get tuple associated to cr from BBcast *)
	get BBcast(cr, tpk, retr, com, =empty) in
  (* receive an authenticated ballot from public channel *)
	in(pub, (=id, =cr, (c:bitstring, s:bitstring, pr_enc:bitstring), hash:bitstring));
  (* ballot specification *)
  let b = (c, s, pr_enc) in
  (* authenticate cr with recalled pwd *)
  if eq(h(id, pwd, cr, b), hash) then
  (* verify signature and proof in the ballot *)
	if check(s, cr) = c then
	if ver_enc(pr_enc, c, pkT) = ok then
  event Log(id, cr);
  event BB_cast(cr, tpk, retr, com, b);
  (* publish ballot w.r.t. credentials on BBcast *)
  insert BBcast(cr, tpk, retr, com, b).

let TallyBallot =
  (* get last cast ballot for cr from BBcast if it is not empty *)
	get BBcast(cr, tpk, retr, com, b) suchthat b <> empty in
  event BB_tally(cr, tpk, retr, com, b);
  (* publish last cast ballot on BBtally *)
	insert BBtally(cr, tpk, retr, com, b);
  (* send all recorded information on BBtally to the public channel *)
  out(pub, (cr, tpk, retr, com, b)).

let AdmissibleExtraction =
  (* get pre-tracking information related to tracker from BBptr *)
  get BBptr(cr, tpk, retr, com, pr_renc, pkT) in
  (* get a tracker from BBtr *)
  get BBtr(tr, etr) in
  (* verify proof of re-encryption *)
  if ver_renc(pr_renc, etr, retr, pkT) = ok then
    (* extract tracker from retr *)
    let tr = extract(retr, pkT) in
    event Link(cr, tr);
    (* record credential associated to a tracker *)
    insert Linked(cr)
  else
    event LinkFailed(cr).

let CheckDecryptionProofs(pkT: pkey) =
  (* get a credential associated to a tracker *)
  get Linked(cr) in
  (* recall vote from BBcand *)
  get BBcand(v) in
  (* get tallied ballot associated to cr from BBtally *)
	get BBtally(=cr, tpk, retr, com, (c: bitstring, s: bitstring, pr_enc: bitstring)) in
  (* get decryption tuple associated retr from BBdec *)
  get BBdec(=retr, tr, pr_dec1, =c, =v, pr_dec2) in
  (* verify proofs of decryptions for retr & c *)
  if ver_dec(pr_dec1, retr, tr, pkT) = ok then
  if ver_dec(pr_dec2, c, v, pkT) = ok then
  (* generate a nonce to select at most one vote for result consistency *)
  new nonce: bitstring;
  event SelectVote(tr, nonce);
  event BB_res(tr, v);
  (* publish result as tracker & vote on BBres *)
  insert BBres(tr, v);
  (* send result to the public channel for accessibility of adversary to BB *)
  out(pub, (tr, v)).

let Server =
  get Id(id) in
  get BBkey(pkT) in
  ( GeneratePassword(id) | (!CheckCommitmentProof(pkT)) | (!CastBallot(pkT))
  | (!TallyBallot) | (!AdmissibleExtraction) | (!CheckDecryptionProofs(pkT)) ).


(***** Voters *****)

let RegisterTrapdoorKey(id: bitstring) =
  (* get own credentials from Cred *)
  get Cred(=id, cr, skV) in
  (* generate a trapdoor key *)
  new tsk: tskey;
  (* compute corresponding trapdoor public key *)
  let tpk = tdpk(tsk) in
  event Trapdoor(id, tpk, tsk);
  (* record trapdoor key pair on Td *)
  insert Td(id, tpk, tsk);
  event BB_td(cr, tpk);
  (* publish trapdoor public key on BBtd *)
  insert BBtd(cr, tpk);
  (* send trapdoor public key to public channel for accessibility of adversary to BB *)
  out(pub, (cr, tpk)).

let LeakCredential =
  (* get password from Pwd *)
  get Pwd(id, pwd) in
  (* get credentials from Cred *)
  get Cred(=id, cr, skV) in
  (* get trapdoor key pair from Td *)
  get Td(=id, tpk, tsk) in
  event Corrupted(id);
  (* send all credentials to the public channel, i.e. to the adversary *)
  out(pub, (id, pwd, cr, skV, tpk, tsk)).

let VerifyVote(id: bitstring) =
  (* get own trapdoor key pair from Td *)
  get Td(=id, tpk, tsk) in
  (* get vote from Voted *)
	get Voted(=id, cr, v) in
  (* get commitment from BBtally *)
	get BBtally(=cr, =tpk, retr, com, b) in
  (* get result for tr & v *)
	get BBres(tr, =v) in
  (* receive commitment randomness (sent by trustees) from Com *)
	get Com(=cr, rT) in
  (* if tr (after opening commitment) is equal to the one on BBres then *)
	if open(com, tsk, rT) = tr then
	event Verified(id, cr, v).

let Voters =
	get Id(id) in
	( RegisterTrapdoorKey(id) | LeakCredential | VerifyVote(id) ).


(***** Voting Platform *****)

let VotingPlatform =
  (* choose a candidate from BBcand *)
  get BBcand(v) in
  (* get public key from BBkey *)
	get BBkey(pkT) in
  (* get own password from Pwd *)
  get Pwd(id, pwd) in
  (* get own signature pair from Cred *)
  get Cred(=id, cr, skV) in
  (* generate a randomness for encryption *)
	new r: bitstring;
  (* encrypt the vote *)
	let c = enc(v, pkT, r) in
  (* sign encryption of the vote *)
	let s = sign(c, skV) in
  (* generate proof of encryption of vote *)
	let pr_enc = proof_enc(c, v, r) in
  (* ballot as a tuple of ciphertext, signature and proof *)
  let b = (c, s, pr_enc) in
  (* authenticate ballot with password *)
	let a = h(id, pwd, cr, b) in
  event Vote(id, v);
  (* record vote on Voted *)
	insert Voted(id, cr, v);
  (* send authenticated ballot to the public channel *)
	out(pub, (id, cr, b, a)).


(*** MAIN PROCESS ***)

process	 ( Administrator | Trustees | (!Registrar)
         | (!Server) | (!Voters) | (!VotingPlatform) )
